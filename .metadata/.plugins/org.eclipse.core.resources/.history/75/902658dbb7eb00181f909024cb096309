import java.util.Arrays;

public class Queue {
	int capacity;
	int front;
	int rear;
	int size;
	int[] Q;
	
	Queue(int cap){
		this.capacity = cap;
		this.front = this.size = 0;
		this.rear = cap-1;
		this.Q = new int[this.capacity];
	}
	boolean isFull(Queue queue) {
		return(queue.size==this.capacity);
	}
	boolean isEmpty(Queue queue) {
		return(queue.size==0);
	}
	void enqueue(int item) {
		if(isFull(this)) 
			return;
		this.rear = (this.rear+1)%this.capacity;
		this.Q[this.rear] = item;
		this.size++;
		System.out.println(item+" enqueued to queue");
		System.out.println(this.Q);
	}
	int dequeue() {
		if(isEmpty(this)) {
			return Integer.MIN_VALUE;
		}
		int item = this.Q[this.front];
		this.front = (this.front+1)%this.capacity;
		this.size--;
		return item;
	}
	int front() {
		if(isEmpty(this)) {
			return Integer.MIN_VALUE;
		}
		return this.Q[this.front];
	}
	int rear() {
		if(isEmpty(this))
			return Integer.MIN_VALUE;
		return this.Q[this.rear];
	}
//Driver Class
	public static class Test
	{
		public static void main(String[] args) {
			Queue queue = new Queue(1000);
			queue.enqueue(10);
			System.out.println("Reached here"+Arrays.toString(queue.Q));
			
			queue.enqueue(20);
			System.out.println(Arrays.toString(queue.Q));
			
			queue.enqueue(30);
			System.out.println(Arrays.toString(queue.Q));
			
			queue.enqueue(40);
			System.out.println(Arrays.toString(queue.Q));
			
			System.out.println(queue.dequeue()+" dequeued from queue");
			System.out.println(Arrays.toString(queue.Q));
			
			System.out.println("Front item is: "+queue.front());
			System.out.println(Arrays.toString(queue.Q));
			
			System.out.println("Rear item is: "+queue.rear());
			System.out.println(Arrays.toString(queue.Q));
		}
	}
}